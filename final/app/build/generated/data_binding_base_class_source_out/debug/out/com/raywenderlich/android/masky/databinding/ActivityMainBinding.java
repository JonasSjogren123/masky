// Generated by view binder compiler. Do not edit!
package com.raywenderlich.android.masky.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.raywenderlich.android.masky.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout constraintLayout;

  @NonNull
  public final ImageView faceArea;

  @NonNull
  public final ImageView mask;

  @NonNull
  public final ConstraintLayout maskDropArea;

  @NonNull
  public final ImageView test01;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout constraintLayout, @NonNull ImageView faceArea,
      @NonNull ImageView mask, @NonNull ConstraintLayout maskDropArea, @NonNull ImageView test01) {
    this.rootView = rootView;
    this.constraintLayout = constraintLayout;
    this.faceArea = faceArea;
    this.mask = mask;
    this.maskDropArea = maskDropArea;
    this.test01 = test01;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.constraintLayout;
      ConstraintLayout constraintLayout = rootView.findViewById(id);
      if (constraintLayout == null) {
        break missingId;
      }

      id = R.id.face_area;
      ImageView faceArea = rootView.findViewById(id);
      if (faceArea == null) {
        break missingId;
      }

      id = R.id.mask;
      ImageView mask = rootView.findViewById(id);
      if (mask == null) {
        break missingId;
      }

      id = R.id.mask_drop_area;
      ConstraintLayout maskDropArea = rootView.findViewById(id);
      if (maskDropArea == null) {
        break missingId;
      }

      id = R.id.test01;
      ImageView test01 = rootView.findViewById(id);
      if (test01 == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, constraintLayout, faceArea, mask,
          maskDropArea, test01);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
